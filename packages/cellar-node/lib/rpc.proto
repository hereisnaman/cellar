syntax = "proto3";

package cellar;

service Follower {
  rpc RequestVote(VoteRequest) returns (Vote) {}
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResult) {}
}

service Client {
  rpc Kill(Empty) returns (Empty) {}
  rpc RequestStatus(Empty) returns (Status) {}
  rpc Set(KeyValuePayload) returns (SuccessResponse) {}
  rpc Get(KeyPayload) returns (ValueResponse) {}
  rpc Remove(KeyPayload) returns (SuccessResponse) {}
}

message Empty {}

message VoteRequest {
  int64 term = 1;
  string candidateId = 2;
  int64 lastLogIndex = 3;
  int64 lastLogTerm = 4;
}

message Vote {
  int64 term = 1;
  bool voteGranted = 2;
}

message Log {
  int64 term = 1;
  int64 position = 2;
  string key = 3;
  string value = 4;
  enum Action {
    SET = 0;
    REMOVE = 1;
  }
  Action action = 5;
}

message AppendEntriesRequest {
  int64 term = 1;
  string leaderId = 2;
  int64 prevLogIndex = 3;
  int64 prevLogTerm = 4;
  int64 leaderCommit = 5;
  repeated Log entries = 6;
}

message AppendEntriesResult {
  int64 term = 1;
  bool success = 2;
}

message Status {
  int64 term = 1;
  string id = 2;
  enum Mode {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
  }
  Mode mode = 3;
  int64 commitIndex = 4;
  int64 lastApplied = 5;
  string address = 6;
  int64 lastLogIndex = 7;
  string votedFor = 8;
}

message KeyValuePayload {
  string key = 1;
  string value = 2;
}

message KeyPayload {
  string key = 1;
}

message ValueResponse {
  bool success = 1;
  string value = 2;
  string leaderId = 3;
}

message SuccessResponse {
  bool success = 1;
  string leaderId = 2;
}
